#!/bin/bash -l
#
# Run this file using 'qsub busco.qsub filelist.txt'
# Kathryn Atherton 2019

# All lines starting with "#$" are SGE qsub commands

# Specify a project to run under
#$ -P mullenl

# Give this job a name
#$ -N busco_loop

# Join standard output and error to a single file
#$ -j y

# Task numbers (73 Adelpha files, #s 47 and 54 do not work, one Limenitis file_)
# CHANGE THIS BASED ON HOW MANY FILES YOU HAVE
#$ -t 1-72

# this limits the number of tasks running at once to 5
# this is because I found that if too many run at once, the busco doesn't run properly
#$ -tc 5

# Name the file where to redirect standard output and error
#$ -o all_busco_log

# Send an email when the job begins and when it ends running
# -m eas

# Request a large memory node, this will affect your queue time, but it's better to overestimate
#$ -l mem_per_core=8G

# Request more cores, this will affect your queue time, make sure your program supports multithreading, or it's a waste
#$ -pe omp 1

# Now we write the script that the compute node will work on.

# First, let's keep track of some information just in case anything goes wrong
echo "=========================================================="
echo "Starting on : $(date)"
echo "Running on node : $(hostname)"
echo "Current directory : $(pwd)"
echo "Current job ID : $JOB_ID"
echo "Current job name : $JOB_NAME"
echo "Task index number : $SGE_TASK_ID"
echo "=========================================================="

# load any modules you might use
# python/2.7.7 is the newest we have and has libraries that the standard version does not.
module load python3
module load blast+/2.7.1
module load hmmer/3.2.1
module load augustus/3.3.2
module load busco/3.0.2

# do some work

# Input file pattern: reads the list of files *see file called make_file_list.sh* 
infile=`sed -n -e "$SGE_TASK_ID p" $1`

# Saves the input file name within the full path to the file (important if your files are not in the same folder as this file)
in="/projectnb/mullenl/kate/annotated_trinity_assemblies/annotated_fastas/${infile}" #CHANGE IF YOU NEED A DIFFERENT PATH

# Output file pattern ... this was specific to the SF.## pattern; it makes the output folder/files with the pattern SF.## 
# (the first 5 characters of the input file name)
# i.e. short_summary_SF.##.txt
# CHANGE THIS IF YOU WANT A DIFFERENT PATTERN 
out=${infile:0:5}

# This is specific to the one Limenitis file that was not named SF.## 
# if(( "$out" == "Range" )); then
# 	out="SF.Lim"
# fi

python BUSCO.py -i $in -o $out -l /projectnb/mullenl/kate/annotated_trinity_assemblies/insecta_odb9  -m transcriptome 

#statements
# do other work if needed.

echo "=========================================================="
echo "Finished on : $(date)"
echo "=========================================================="




